<body id="edit">
    <h2>Edit</h2>

    <input type="hidden" id="ID" />
    <div class="form-group">
        <label class="col-md-2 control-label" for="UserName">Username </label>
        <div class="col-md-10">
            <input type="text" name="UserName" id="UserName" required />
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-2 control-label" for="Email">Email </label>
        <div class="col-md-10">
            <input type="text" name="Email" id="Email" required />
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-2 control-label" for="PhoneNumber">Phone Number </label>
        <div class="col-md-10">
            <input type="text" name="PhoneNumber" id="PhoneNumber" />
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-2 control-label" for="RoleSelected">Role</label>
        <div class="col-md-10" id="AddRole">
         
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-10">

        </div>
    </div>
    <br />  <br />

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" id="save" />
        </div>
    </div>
    <div id="x" style="color:red;"></div>

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    <script>
        //add event listener to body to populate my roles when it loads
        var body = document.getElementById("edit");
        document.addEventListener("load", loadUser());


        function loadUser() {
            var loc = window.location.href;

            console.log(loc.substring(loc.lastIndexOf('/') + 1, loc.length));
            postData('/AspNetUsers/LoadUserDetails?id=' + loc.substring(loc.lastIndexOf('/') + 1, loc.length))
                .then(function (response) {
                    console.table(response);

                    document.getElementById("ID").value = response[0].Id;
                    document.getElementById("UserName").value = response[0].UserName;
                    document.getElementById("Email").value = response[0].Email;
                    var assignedRoles = [];
                     assignedRoles = response[0].Role;
                    //load roles
                    postData('/AspNetUsers/GetRoles')
                        .then(function (response) {
                            console.table(response);

                            var roleList = document.getElementById("AddRole");
                            var chkdiv = document.createElement('div');
                            chkdiv.setAttribute("class", "divStyle");
                   
                                //for every role in the database, create a checkbox and assign attributes
                                //to them. The idea is to allow administration assign multiple roles to user
                                //that is being edited.
                                //i included the if condition in order for the already assigned user role not to
                                //show up in the list of checkboxes.
                            for (var i = 0; i < response.result.length; i++) {

                                   // if (role != response.result[i].Name) {
                                    var checkbox = document.createElement('input');
                                    checkbox.type = "checkbox";
                                    checkbox.name = "Role";
                                    checkbox.value = response.result[i].Name;
                                    checkbox.id = response.result[i].Name;

                            //check the roles that are already assigned to users and check the boxes
                                for (var item = 0; item < assignedRoles.length;item++) {
                                    if (assignedRoles[item] == response.result[i].Name) {
                                    checkbox.checked = true;
                                }
                                }            
                                   //create labels for each checkbox to mark what each box is for
                                    var label = document.createElement('label')
                                    label.htmlFor = checkbox.id;
                                    label.appendChild(document.createTextNode(response.result[i].Name));

                                    
                                    chkdiv.appendChild(checkbox);
                                    chkdiv.appendChild(label);
                                    roleList.appendChild(chkdiv);
                              //  }
                            }

                        }).catch(error => console.error(error))
                    //end load roles
                }).catch(error => console.error(error))
            //end load user
        }

        var submit = document.getElementById("save");
        submit.addEventListener("click", function () {
            var data = new Object();
            var listOfRoles = [];

            data.Id = document.getElementById("ID").value;
            data.UserName = document.getElementById("UserName").value;
            data.Email = document.getElementById("Email").value;
            var userRoles = document.getElementsByName("Role");

            for (var i = 0; i < userRoles.length; i++) {
                if (userRoles[i].checked == true) {
                    listOfRoles.push(userRoles[i].value);
                }
            }
            data.selectedRole = listOfRoles;

            postData('/AspNetUsers/Edit', data)
                .then(data => handleError(data))
                .catch(error => console.error(error))
        });
        // end function save

        function handleError(data) {
            console.table(data);
            if (data.Errors) {
                document.getElementById("x").innerHTML = data.Errors;
            }
            else {
                window.location = "/AspNetUsers";
            }
        }//end handleError

        function postData(url, data) {
            // Default options are marked with *
            return fetch(url, {
                body: JSON.stringify(data), // must match 'Content-Type' header
                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                credentials: 'same-origin', // include, same-origin, *omit
                headers: {
                    'user-agent': 'Mozilla/4.0 MDN Example',
                    'content-type': 'application/json'
                },
                method: 'POST', // *GET, POST, PUT, DELETE, etc.
                mode: 'cors', // no-cors, cors, *same-origin
                redirect: 'follow', // manual, *follow, error
                referrer: 'no-referrer', // *client, no-referrer
            })
                .then(response => response.json()) // parses response to JSON
        }

    </script>

</body>